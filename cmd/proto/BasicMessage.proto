syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


option go_package = "cmd/Primitive";

message TransTimestamp{
  google.protobuf.Timestamp timeStamp =1;
  int32 seq = 2;
  int32 id = 3;
}
message ReadOp{
  string key = 1;

}
message ReadResult{
  string key =1;
  string val = 2;
}
// TODO Add more complex operation to WriteOp
message WriteOp{
  string key =1;
  string val = 2;
}
message Result{
  repeated string res =1;
}
//TODO check if more fields are needed
message Deps{
  //The id of conflicting transactions
  repeated string ids = 1;
}
//TODO design reads part and writes
message Trans{
  //The following timestamp should be the t0, which should not be modified
  TransTimestamp t0 = 1;

  repeated ReadOp reads = 2;
  repeated WriteOp writes =3;
  string id = 4; // generated by t0, used to find transaction in the server side
  TranStatus st = 5;
  NodeInfo clientInfo = 6;
  string cId = 7; // This cId is assigned by the client, which is used retrieve results
  //TODO if deps should be here

  int32 eleSize =8; // Size of the electorates
  repeated int32 relatedReplicas = 9; // the id of the related replicas
  //The following is also the decided version of collectT in outer Trans
  TransTimestamp ExT = 10; //Execution t, which is decided in the Accept phase

}
//Used for client to pass its info, so that coordinator know how to send back info
// My need to be separated to other nodes during PreAccept TODO
message NodeInfo{
  string addr = 1; // ip:port

}
message ShardInfo{
  bytes start = 1;
  bytes end = 2;
  int32 shardId = 3;
  repeated int32 replicas = 4;
}
//Used by the client to submit the trans
//TODO The coordinator should return the transactionId to the client at suitable time
message SubmitTransReq{
  Trans trans = 1;
}
message PreAcceptReq{
  Trans trans = 1;
  TransTimestamp t0 =2;
}

message PreAcceptResp{
  TransTimestamp t = 1;
  Deps deps = 2;
  string transId = 3;
}

message AcceptReq{
  Trans trans = 1;
  TransTimestamp exT =2;
  Deps deps = 3;
}
message AcceptResp{
  Deps deps = 1;
  string transId =2;
}
message CommitReq{
  Trans trans = 1;
  TransTimestamp exT =2;
  Deps deps = 3;

}
message ReadReq{
  Trans trans =1;
  TransTimestamp exT =2;
  Deps deps = 3;
}
message ReadResp{
  repeated ReadResult reads =1;
}
message ApplyReq{
  Trans trans =1;
  TransTimestamp exT =2;
  Deps deps_p = 3;
  Result res = 4;


}
message RecoverReq{

}
message RecoverResp{

}
//Tick Msg is used to update time and calculate for timeout
message TickMsg{
  google.protobuf.Timestamp timeStamp =1;
}
message HeartbeatMsg{
  int32 to = 1;
}
enum TranStatus{
  New = 0;
  PreAccepted = 1;
  Accepted = 2;
  Commited = 3;
  Applied = 4;
}
enum MsgType{
  PreAccept = 0;
  Accept = 1;
  Commit = 2;
  Read = 3;
  Apply = 4;
  Recover = 5;
  Tick = 6;
  PreAcceptOk = 7;
  AcceptOk = 8;
  CommitOk = 9;
  ReadOk = 10;
  ApplyOk = 11;
  RecoverOk = 12;
  SubmitTrans = 13;   // Used by the client to submit the transaction
  HeartBeat = 14;
}


message Message{
  MsgType type = 1;
  bytes data = 2;
  int32 from = 3;
  int32 to = 4;
}

service Coordinate {
  rpc sendReq(Message) returns (google.protobuf.Empty) {}

}