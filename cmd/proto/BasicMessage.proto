syntax = "proto3";

import "google/protobuf/timestamp.proto";

option go_package = "cmd/Primitive";

message TransTimestamp{
  google.protobuf.Timestamp timeStamp =1;
  int32 seq = 2;
  int32 id = 3;
}
message ReadOp{
  string key = 1;

}
// TODO Add more complex operation to WriteOp
message WriteOp{
  string key =1;
}
//TODO check if more fields are needed
message Deps{
  //The id of conflicting transactions
  repeated string ids = 1;
}
//TODO design reads part and writes
message Trans{
  //TODO Check the specific meaning of this timestamp
  TransTimestamp timestamp = 1;
  repeated ReadOp reads = 2;
  repeated WriteOp writes =3;
  string id = 4;

}
message PreAcceptReq{
  Trans trans = 1;
  TransTimestamp t0 =2;
}

message PreAcceptResp{
  TransTimestamp t = 1;
  Deps deps = 2;
}

message AcceptReq{

}
message AcceptResp{

}
message CommitReq{

}
message ReadReq{

}
message ReadResp{

}
message ApplyReq{

}
message RecoverReq{

}
message RecoverResp{

}
//Tick Msg is used to update time and calculate for timeout
message TickMsg{
  google.protobuf.Timestamp timeStamp =1;
}
enum ReqType{
  PreAccept = 0;
  Accept = 1;
  Commit = 2;
  Read = 3;
  Apply = 4;
  Recover = 5;
  Tick = 6;
}

enum RespType{
  PreAcceptOk = 0;
  AcceptOk = 1;
  CommitOk = 2;
  ReadOk = 3;
  ApplyOk = 4;
  RecoverOk = 5;
}
message Request{
  ReqType type = 1;
  bytes data = 2;
  int32 from = 3;
  int32 to = 4;
}
message Response{
  ReqType type = 1;
  bytes data = 2;
  int32 from = 3;
  int32 to = 4;
}
service Coordinate {
  rpc sendReq(Request) returns (Response) {}

}