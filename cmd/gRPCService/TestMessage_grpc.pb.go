// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.2
// source: cmd/proto/TestMessage.proto

package gRPCService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GetHeartBeatClient is the client API for GetHeartBeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetHeartBeatClient interface {
	GetTimestamp(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*timestamppb.Timestamp, error)
}

type getHeartBeatClient struct {
	cc grpc.ClientConnInterface
}

func NewGetHeartBeatClient(cc grpc.ClientConnInterface) GetHeartBeatClient {
	return &getHeartBeatClient{cc}
}

func (c *getHeartBeatClient) GetTimestamp(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*timestamppb.Timestamp, error) {
	out := new(timestamppb.Timestamp)
	err := c.cc.Invoke(ctx, "/GetHeartBeat/GetTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetHeartBeatServer is the server API for GetHeartBeat service.
// All implementations must embed UnimplementedGetHeartBeatServer
// for forward compatibility
type GetHeartBeatServer interface {
	GetTimestamp(context.Context, *timestamppb.Timestamp) (*timestamppb.Timestamp, error)
	mustEmbedUnimplementedGetHeartBeatServer()
}

// UnimplementedGetHeartBeatServer must be embedded to have forward compatible implementations.
type UnimplementedGetHeartBeatServer struct {
}

func (UnimplementedGetHeartBeatServer) GetTimestamp(context.Context, *timestamppb.Timestamp) (*timestamppb.Timestamp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestamp not implemented")
}
func (UnimplementedGetHeartBeatServer) mustEmbedUnimplementedGetHeartBeatServer() {}

// UnsafeGetHeartBeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetHeartBeatServer will
// result in compilation errors.
type UnsafeGetHeartBeatServer interface {
	mustEmbedUnimplementedGetHeartBeatServer()
}

func RegisterGetHeartBeatServer(s grpc.ServiceRegistrar, srv GetHeartBeatServer) {
	s.RegisterService(&GetHeartBeat_ServiceDesc, srv)
}

func _GetHeartBeat_GetTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamppb.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetHeartBeatServer).GetTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GetHeartBeat/GetTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetHeartBeatServer).GetTimestamp(ctx, req.(*timestamppb.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

// GetHeartBeat_ServiceDesc is the grpc.ServiceDesc for GetHeartBeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetHeartBeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "GetHeartBeat",
	HandlerType: (*GetHeartBeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTimestamp",
			Handler:    _GetHeartBeat_GetTimestamp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/proto/TestMessage.proto",
}
